<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
    <link href="doxygen.css" rel="stylesheet" type="text/css">
    <link href="tabs.css" rel="stylesheet" type="text/css">
    <link href="custom.css" rel="stylesheet" type="text/css">
    <title>Humanoid Path Planner documentation</title>
  </head>
  <body>

<h1><a class="anchor" name="hppDoc_howToInstall">How to install HPP</a></h1><h2><a class="anchor" name="hppDoc_install_intro">
Introduction</a></h2>
HPP (Humanoid Path Planner) is composed of several software modules packaged by autotools. These software modules are stored in a git repositories on git.laas.fr (or softs.laas.fr for people working at LAAS).<p>
There are mainly two types of packages in HPP: <ul>
<li>packages under development that are not stable yet: each developer needs to download his own version using git and commit his modifications. </li>
<li>packages that are more stable and for which versions have already been released: these packages are automatically installed using a tool called <code>robotpkg</code>.</li>
</ul>
<h2><a class="anchor" name="hppDoc_installing">
Installation procedure</a></h2>
<h3><a class="anchor" name="hppDoc_preliminary">
Preliminary remarks</a></h3>
<h4><a class="anchor" name="hppDoc_subsubsec_env">
Environment variables</a></h4>
Along the installation procedure, some environment variables are defined. It is recommended to include these definitions into an initialization file like <code>.tcshrc</code> or <code>.bashrc</code> so that they will be defined at each new session.<h4><a class="anchor" name="hppDoc_subsubsec_kineo">
About KineoWorks</a></h4>
To install KineoWorks, you will be asked for one archive: <ul>
<li>KPPSDK_x.yy.zzz.tgz and </li>
</ul>
You need to ask this archives to <a href="mailto:anthony.mallet@laas.fr">Anthony Mallet</a>.<h3><a class="anchor" name="hppDoc_robotpkg">
Robotpkg</a></h3>
The first step consists in installing <code>robotpkg</code> on your account. For that, you need to create a directory where <code>robotpkg</code> will install all necessary packages: <div class="fragment"><pre class="fragment">[~] mkdir ${HOME}/openrobots
[~] cd ${HOME}/openrobots
</pre></div> Then download a working version of <code>robotpkg</code> <div class="fragment"><pre class="fragment">[openrobots] git-clone git+ssh:<span class="comment">//[git|softs].laas.fr/git/robots/robotpkg</span>
</pre></div> Note that from now on, <code> [git|softs] </code> should be replaced by <ul>
<li><code>softs</code> if you are working on a LAAS account, </li>
<li><code>git</code> if you are working from a distant site.</li>
</ul>
Set the following environment variable: <div class="fragment"><pre class="fragment">[openrobots] setenv ROBOTPKG_BASE ${HOME}/openrobots
</pre></div> Install <code>robotpkg:</code> <div class="fragment"><pre class="fragment">[openrobots] cd robotpkg
[robotpkg] ./bootstrap/bootstrap --prefix=${HOME}/openrobots
</pre></div> Then follow the instructions.<p>
To install a package, go into <code>${HOME}/openrobots/robotpkg/path-to-package</code> and type <code>make update</code><p>
For instance <div class="fragment"><pre class="fragment">[robotpkg] cd path/hpp-core
[hpp-core] make update
</pre></div> All dependencies are automatically installed. For some packages, you will need to follow instructions to accept license agreement. For instance KineoWorks installation will output the following message: <div class="fragment"><pre class="fragment">ERROR: kineo-pp-2.04.301r3 has an unacceptable license: kineocam-license.
ERROR:     To view the license, enter <span class="stringliteral">"make show-license"</span>.
ERROR:     To indicate acceptance, <span class="keyword">add</span> <span class="keyword">this</span> line to
ERROR:        ${HOME}/openrobots/etc/robotpkg.conf:
ERROR:     ACCEPTABLE_LICENSES+=kineocam-license
</pre></div> Follow the instruction and type again: <div class="fragment"><pre class="fragment">[hpp-core] make update
</pre></div><p>
Once modules managed by <code>robotpkg</code> have been installed, you can download working versions of packages under development or create your own package.<h3><a class="anchor" name="hppDoc_other_packages">
Packages under development or new packages.</a></h3>
To download, compile and install packages not managed by <code>robotpkg</code>, or packages that you want to modify or debug, create a development directory as follows: <div class="fragment"><pre class="fragment">[~] mkdir ${HOME}/devel
[~] cd ${HOME}/devel
[devel] mkdir src
[devel] cd src
</pre></div> Then download the packages you need <div class="fragment"><pre class="fragment">[src] git-clone git+ssh:<span class="comment">//[git|softs].laas.fr/git/jrl/name-of-package</span>
</pre></div><p>
Each package (managed by <code>robotpkg</code> or not) installs a file with extension <code>.pc</code> in <code>prefix/lib/pkgconfig</code> where <code>prefix</code> is the installation prefix of the package. This file stores information about the package and its dependencies. This information is retrieved by <a href="hppdoc_autotools.html#hppDoc_pkg_config"><code>pkg-config</code></a> executable.
<code>pkg-config</code> searches for <code>.pc</code> files in paths encoded in <code>PKG_CONFIG_PATH</code> environment variable. You need therefore to set this variable correctly, for instance: <div class="fragment"><pre class="fragment">[devel] setenv PKG_CONFIG_PATH ${HOME}/devel/lib/pkgconfig:${HOME}/openrobots/lib/pkgconfig:/usr/local/lib/pkgconfig
</pre></div><p>
Compile and install the packages in your development directory
<div class="fragment"><pre class="fragment">
[src] cd <span class="keyword">package</span>
<span class="keyword"></span>[package] ./bootstrap (or ./autogen.sh)
[package] mkdir _build
[package] cd _build
[build] ../configure --prefix=${HOME}/devel
[build] make
[build] make install
</pre></div>

<h3><a class="anchor" name="hppDoc_important_rules">
Important installation rules
</a></h3>

As explained above, releases of stable packages are installed by <code>robotpkg</code> in <code>${HOME}/openrobots</code> prefix, while unstable packages are installed by hand in <code>${HOME}/devel</code> prefix.
<p></p>
It is very important that in the <a href="graph-dependency.html">dependency tree</a>, a package installed by <code>robotpkg</code> never depends on a package installed by hand in <code>${HOME}/devel</code> prefix.
<code>robotpkg</code> indeed automatically installs required dependencies and would be confused if the dependency of a package it is trying to install was already installed in <code>${HOME}/devel</code>.
<p></p>
You should therefore be very careful when switching a package from an unstable version to a release. You should first uninstall the dependencies of this package from <code>${HOME}/devel</code>:

<div class="fragment"><pre class="fragment">
[~] cd ${HOME}/devel
[devel] rm -rf share/doc/package
[devel] rm -rf include/package
[devel] rm -f lib/libpackage*
[devel] rm -f lib/pkgconfig/package.pc
</pre></div>


<h3><a class="anchor" name="hppDoc_omniORB">
Configuring CORBA and using hppCorbaServer</a></h3>
<code>hppCorbaServer</code> is a package that enables developers to run their algorithms from external application like python scripts for instance. This package instanciates a 3 CORBA objects that can handle requests trigerring actions in HPP. The CORBA objects correspond to the following interfaces: <ul>
<li><code><a class="elRef" doxygen="hppCorbaServer.doxytag:/home/florent/devel/share/doc/hppCorbaServer/" href="@HPPCORBASERVER_DOCDIR@/html/main.html">ChppciRobot</a></code> to define and build robots, </li>
<li><code><a class="elRef" doxygen="hppCorbaServer.doxytag:/home/florent/devel/share/doc/hppCorbaServer/" href="@HPPCORBASERVER_DOCDIR@/html/main.html">ChppciObstacle</a></code> to define obstacles, </li>
<li><code><a class="elRef" doxygen="hppCorbaServer.doxytag:/home/florent/devel/share/doc/hppCorbaServer/" href="@HPPCORBASERVER_DOCDIR@/html/main.html">ChppciProblem</a></code> to define and solve path planning problems. The package also optionally implements an OpenHRP client (configuration option --with-openhrp) that enables the user to download HRP2 model by a Corba request.</li>
</ul>
<code>hppCorbaServer</code> is based on omniORB4 (installed by robotpkg), an implementation of Corba. We will explain now how to configure omniORB4 in order to be able <ul>
<li>to load HRP2 model from OpenHRP </li>
<li>to instanciate a Corba server to control your program.</li>
</ul>
<h4><a class="anchor" name="hppDoc_name_server">
The name server</a></h4>
Corba objects are defined by names. In order to communicate between objects, Corba needs to map names with objects, that can run on distant machines. This is the role of the name server. Before starting launching Corba objects, you thus need to start a name server.<p>
A name server is identified by the machine on which it runs and by a port id on this machine. You thus need to choose a port id on your machine. In order to avoid conflicts when several people work on the same machine, we usually use as port id: (user id + 1024). We strongly recommend that you follow this procedure.<p>
Type then <div class="fragment"><pre class="fragment">[~] <span class="keywordtype">id</span> -u
</pre></div> in a terminal and you get your user id on your machine. Add 1024 to this number, you get your port id. Then create a directory to store omniORB information <div class="fragment"><pre class="fragment">[~] mkdir ${HOME}/omniORB
[~] cd ${HOME}/omniORB
</pre></div> In this directory, create a file <code>omniORG.cfg</code> and copy the following line in this file: <div class="fragment"><pre class="fragment"><span class="preprocessor"># Configuration file for omniOrb</span>
<span class="preprocessor">InitRef = NameService=corbaloc:iiop:localhost:port-id/NameService</span>
</pre></div> replacing <code>port-id</code> by your port id computed above.<p>
File <code>omniORG.cfg</code> contains the address of the name server. The name server and each Corba object you launch thus needs to access to this file. For that, define the following environment variable: <div class="fragment"><pre class="fragment">setenv OMNIORB_CONFIG ${HOME}/omniORB/omniORB.cfg
</pre></div> You need also to define a directory where log messages will be saved: <div class="fragment"><pre class="fragment">setenv OMNINAMES_LOGDIR ${HOME}/omniORB/log
</pre></div><p>
You can eventually launch the name server: <div class="fragment"><pre class="fragment">omniNames -start port-<span class="keywordtype">id</span>
</pre></div> the fisrt time and <div class="fragment"><pre class="fragment">omniNames
</pre></div> the following times.<h4><a class="anchor" name="hppDoc_python">
Controlling an application using python scripts</a></h4>
To send request to hppCorbaServer using python, you need to install package <ul>
<li><code>hppPython</code> through <code>robotpkg</code>.</li>
<div class="fragment"><pre class="fragment">
cd ${HOME}/openrobots/robotpkg/scripts/hpp-python
make update
</pre></div>
</ul>
<code>hppPython</code> installs a python script <code>hppInit.py</code> that initializes 3 CORBA clients, one to each the 3 CORBA objects instanciated by <code>hppCorbaServer</code> and described at the beginning of this section (<a class="el" href="hppdoc_howtoinstall.html#hppDoc_omniORB">Configuring CORBA and using hppCorbaServer</a>).
<p>
After installing <code>hppPython</code>, you need to reinstall this documentation
<ul>
  <li>either by doing <code>../configure --prefix=... ; make; make install</code> in <code>hppDoc/build</code>,</li>
  <li>or by doing <code>make update</code> in <code>robotpkg/doc/hpp-doc</code>.
</ul>
and to set environment variables. For that, follow <a href="@HPPPYTHON_DOCDIR@/main.html">this link</a>.
<p>
Then open a python shell and call the initialization script <div class="fragment"><pre class="fragment">[~] python
Python 2.4.3 (#1, Oct 23 2006, 14:19:47)
[GCC 4.1.1 20060525 (Red Hat 4.1.1-1)] on linux2
Type <span class="stringliteral">"help"</span>, <span class="stringliteral">"copyright"</span>, <span class="stringliteral">"credits"</span> or <span class="stringliteral">"license"</span> <span class="keywordflow">for</span> more information.
&gt;&gt;&gt; from hppInit <span class="keyword">import</span> *
&gt;&gt;&gt;
</pre></div> Three variables <code>robotClient</code>, <code>obstacleClient</code> and <code>problemClient</code> are defined and can be used to send requests to <code>hppCorbaServer</code>.<p>
For an example, see <code>hppPython/src/example.py</code>.<h2><a class="anchor" name="hppDoc_install_example">
Example: Intalling and running walk planner package and corresponding kpp Interface</a></h2>
<h3><a class="anchor" name="hppDoc_install_example_subsec">
Installing necessary packages</a></h3>
Download, install <code>robotpkg</code> and type <code>make update</code> in <code>graphics/kpp-interfacewalk</code> on a machine with a Kineo license.<h3><a class="anchor" name="hppDoc_subsec_openhrp">
Starting OpenHRP</a></h3>
To download the model of HRP2, you need to launch OpenHRP.<h4><a class="anchor" name="hppDoc_subsubsec_nameServer">
Starting the name server</a></h4>
The first step consists in starting the name server: <div class="fragment"><pre class="fragment">[~] ${HOME}/openrobots/bin/omniNames -start port-<span class="keywordtype">id</span>
</pre></div> where port-id is your port-id. If you run omniNames later, you will not need to specify again the port id. Simply type: <div class="fragment"><pre class="fragment">[~] ${HOME}/openrobots/bin/omniNames
</pre></div><h4><a class="anchor" name="hppDoc_subsubsec_modelloader">
Starting OpenHRP model loader</a></h4>
Type <div class="fragment"><pre class="fragment">[~] ${HOME}/openrobots/bin/Modelloader.sh
ready
</pre></div><h4><a class="anchor" name="hppDoc_subsubsec_run_kpp">
Running KineoPathPlanner with kppInterfaceWalk module</a></h4>
You can now run KineoPathPlanner and load kppInterfaceWalk module: <div class="fragment"><pre class="fragment">   ${HOME}/openrobots/bin/KineoPathPlanner -ModulePath ${HOME}/openrobots/lib/modules/${HOST}/libkppInterfaceWalk.so
</pre></div> where <code>${HOST}</code> is the name of your machine (or localhost.localdomain).<p>
You should get the following interface:<p>
<div align="center">
<img src="figures/kppInterfaceWalk.png" alt="kppInterfaceWalk.png">
<p><strong>KineoPathPlanner with module kppInterfaceWalk.</strong></p></div>
<h4><a class="anchor" name="hppDoc_solve_GUI">
Defining and solving a problem using menu "HPP/WALK"</a></h4>
To solve a simple problem without obstacles, do the following step: <ul>
<li>Click in menu "HPP/WALK -&gt; Load HRP2"</li>
</ul>
<ul>
<li>Click on button "Zoom All" and you should see the robot in a bounding box.</li>
</ul>
<ul>
<li>In the top left "Scene" tree, in the "Devices" node, select "Humanoid Box"</li>
</ul>
<ul>
<li>Click in menu "Insert -&gt; Path -&gt; New"</li>
</ul>
<ul>
<li>The background becomes grey. Move the box to the desired goal configuration.</li>
</ul>
<ul>
<li>Click on the button "Done" (top right panel). The background becomes blue again.</li>
</ul>
<ul>
<li>Click in menu "HPP/WALK -&gt; Set Init and Goal Configs"</li>
</ul>
<ul>
<li>Click in menu "HPP/WALK -&gt; Solve Problem"</li>
</ul>
<ul>
<li>In the "Scene" tree, in the "Paths" node, select the last path</li>
</ul>
<ul>
<li>Play the path in the path player that has appeared.</li>
</ul>
<h4><a class="anchor" name="hppDoc_solve_python">
Defining and solving a problem using python scripts</a></h4>
<ul>
<li>Click in menu "HPP/WALK -&gt; Start CORBA Server" </li>
<li>Open a python interpreter and type the commands below. <div class="fragment"><pre class="fragment">[~] python
Python 2.4.3 (#1, Oct 23 2006, 14:19:47)
[GCC 4.1.1 20060525 (Red Hat 4.1.1-1)] on linux2
Type <span class="stringliteral">"help"</span>, <span class="stringliteral">"copyright"</span>, <span class="stringliteral">"credits"</span> or <span class="stringliteral">"license"</span> <span class="keywordflow">for</span> more information.
&gt;&gt;&gt; from hppWalkInit <span class="keyword">import</span> *
&gt;&gt;&gt; initWalkPlanner(-8, -8, 0, 8, 8, 0)
&gt;&gt;&gt; problemClient.solve()
</pre></div></li>
</ul>
<ul>
<li>In the "Scene" tree, in the "Paths" node, select the last path</li>
</ul>
<ul>
<li>Play the path in the path player that has appeared.</li>
</ul>
You can of course add obstacles using Corba Client obstacleClient  <br><br>


 <hr>
 <center>
   <img src="./images/footer.jpg" Height=100>
 <br>Humanoid Path Planner documentation</br>
 </center>
 <hr>
</center>
</body>
</html>

