How to install HPP
==================


Introduction
------------


*HPP* (Humanoid Path Planner) is composed of several software modules
packaged by autotools. These software modules are stored in a git
repositories on `git.laas.fr` (or `softs.laas.fr` for people working
at LAAS).

There are mainly two types of packages in HPP:

* packages under development that are not stable yet: each developer
  needs to download his own version using git and commit his
  modifications.

* packages that are more stable and for which versions have already
  been released: these packages are automatically installed using a
  tool called robotpkg.


Installation procedure
----------------------

Preliminary remarks
~~~~~~~~~~~~~~~~~~~

Environment variables
^^^^^^^^^^^^^^^^^^^^^

Along the installation procedure, some environment variables are
defined. It is recommended to include these definitions into an
initialization file like `.tcshrc` or `.bashrc` so that they will be
defined at each new session.

About KineoWorks
^^^^^^^^^^^^^^^^
To install KineoWorks, you will be asked for one archive:

* KPPSDK_x.yy.zzz.tgz and

You need to ask this archives to link:anthony.mallet@laas.fr[Anthony
Mallet].


Robotpkg
~~~~~~~~

The first step consists in installing robotpkg on your account. For
that, you need to create a directory where robotpkg will install all
necessary packages:


[source,shell]
[~] mkdir ${HOME}/openrobots
[~] cd ${HOME}/openrobots

Then download a working version of robotpkg:

[source,shell]
[openrobots] git-clone git+ssh://[git|softs].laas.fr/git/robots/robotpkg

Note that from now on, [git|softs] should be replaced by
* _softs_ if you are working on a LAAS account,
* _git_ if you are working from a distant site.

Set the following environment variable:

[source,shell]
[openrobots] setenv ROBOTPKG_BASE ${HOME}/openrobots

Install robotpkg:

[source,shell]
[openrobots] cd robotpkg
[robotpkg] ./bootstrap/bootstrap --prefix=${HOME}/openrobots

Then follow the instructions.

To install a package, go into
`${HOME}/openrobots/robotpkg/path-to-package` and type `make update`.

For instance:

[source,shell]
[robotpkg] cd path/hpp-core
[hpp-core] make update


All dependencies are automatically installed. For some packages, you
will need to follow instructions to accept license agreement. For
instance KineoWorks installation will output the following message:

[source,shell]
ERROR: kineo-pp-2.04.301r3 has an unacceptable license: kineocam-license.
ERROR:     To view the license, enter "make show-license".
ERROR:     To indicate acceptance, add this line to
ERROR:        ${HOME}/openrobots/etc/robotpkg.conf:
ERROR:     ACCEPTABLE_LICENSES+=kineocam-license

Follow the instruction and type again:

[source,shell]
[hpp-core] make update

Once modules managed by robotpkg have been installed, you can download
working versions of packages under development or create your own
package.


Packages under development or new packages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To download, compile and install packages not managed by robotpkg, or
packages that you want to modify or debug, create a development
directory as follows:

[source,shell]
[~] mkdir ${HOME}/devel
[~] cd ${HOME}/devel
[devel] mkdir src
[devel] cd src

Then download the packages you need:

[source,shell]
[src] git-clone git+ssh://[git|softs].laas.fr/git/jrl/name-of-package


Each package (managed by robotpkg or not) installs a file with
extension `.pc` in `prefix/lib/pkgconfig` where prefix is the
installation prefix of the package. This file stores information about
the package and its dependencies. This information is retrieved by
pkg-config executable. pkg-config searches for .pc files in paths
encoded in `PKG_CONFIG_PATH` environment variable. You need therefore
to set this variable correctly, for instance:

[source,shell]
[devel] setenv PKG_CONFIG_PATH ${HOME}/devel/lib/pkgconfig:${HOME}/openrobots/lib/pkgconfig:/usr/local/lib/pkgconfig

Compile and install the packages in your development directory:

[source,shell]
[src] cd package
[package] ./bootstrap (or ./autogen.sh)
[package] mkdir _build
[package] cd _build
[build] ../configure --prefix=${HOME}/devel
[build] make
[build] make install


Important installation rules
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As explained above, releases of stable packages are installed by
robotpkg in `${HOME}/openrobots` prefix, while unstable packages are
installed by hand in ${HOME}/devel prefix.

It is very important that in the dependency tree, a package installed
by robotpkg never depends on a package installed by hand in
`${HOME}/devel` prefix. robotpkg indeed automatically installs
required dependencies and would be confused if the dependency of a
package it is trying to install was already installed in
`${HOME}/devel`.

You should therefore be very careful when switching a package from an
unstable version to a release. You should first uninstall the
dependencies of this package from `${HOME}/devel`:

[source,shell]
[~] cd ${HOME}/devel
[devel] rm -rf share/doc/package
[devel] rm -rf include/package
[devel] rm -f lib/libpackage*
[devel] rm -f lib/pkgconfig/package.pc


Configuring CORBA and using hppCorbaServer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

hppCorbaServer is a package that enables developers to run their
algorithms from external application like python scripts for
instance. This package instanciates a 3 CORBA objects that can handle
requests trigerring actions in *HPP*. The CORBA objects correspond to
the following interfaces:

* ChppciRobot to define and build robots,

* ChppciObstacle to define obstacles,

* ChppciProblem to define and solve path planning problems. The
  package also optionally implements an OpenHRP client (configuration
  option --with-openhrp) that enables the user to download HRP2 model
  by a Corba request.


hppCorbaServer is based on omniORB4 (installed by robotpkg), an
implementation of Corba. We will explain now how to configure
omniORB4 in order to be able:

* to load HRP2 model from OpenHRP

* to instanciate a Corba server to control your program.


The name server
^^^^^^^^^^^^^^^

Corba objects are defined by names. In order to communicate between
objects, Corba needs to map names with objects, that can run on
distant machines. This is the role of the name server. Before starting
launching Corba objects, you thus need to start a name server.

A name server is identified by the machine on which it runs and by a
port id on this machine. You thus need to choose a port id on your
machine. In order to avoid conflicts when several people work on the
same machine, we usually use as port id: `(user id + 1024)`. We
strongly recommend that you follow this procedure.

Type then

[source,shell]
[~] id -u

in a terminal and you get your user id on your machine. Add 1024 to
this number, you get your port id. Then create a directory to store
omniORB information

[source,shell]
[~] mkdir ${HOME}/omniORB
[~] cd ${HOME}/omniORB

In this directory, create a file omniORG.cfg and copy the following
line in this file:

[source,shell]
# Configuration file for omniOrb
InitRef = NameService=corbaloc:iiop:localhost:port-id/NameService

replacing port-id by your port id computed above.

File omniORG.cfg contains the address of the name server. The name server and each Corba object you launch thus needs to access to this file. For that, define the following environment variable:

[source,shell]
setenv OMNIORB_CONFIG ${HOME}/omniORB/omniORB.cfg

You need also to define a directory where log messages will be saved:

[source,shell]
setenv OMNINAMES_LOGDIR ${HOME}/omniORB/log

You can eventually launch the name server:

[source,shell]
omniNames -start port-id

the first time and

[source,shell]
omniNames

the following times.
Controlling an application using python scripts
To send request to hppCorbaServer using python, you need to install package

* hppPython through robotpkg.

[source,shell]
cd ${HOME}/openrobots/robotpkg/scripts/hpp-python
make update

hppPython installs a python script hppInit.py that initializes 3 CORBA
clients, one to each the 3 CORBA objects instanciated by
hppCorbaServer and described at the beginning of this section
(Configuring CORBA and using hppCorbaServer).

After installing hppPython, you need to reinstall this documentation

    * either by doing `../configure --prefix=... ; make; make install`
      in `hppDoc/build,`

    * or by doing make update in `robotpkg/doc/hpp-doc`.

and to set environment variables. For that, follow this link.

Then open a python shell and call the initialization script

[source,shell]
[~] python
Python 2.4.3 (#1, Oct 23 2006, 14:19:47)
[GCC 4.1.1 20060525 (Red Hat 4.1.1-1)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> from hppInit import *
>>>


Three variables robotClient, obstacleClient and problemClient are
defined and can be used to send requests to hppCorbaServer.

For an example, see `hppPython/src/example.py`.



Installing and running walk planner package and corresponding kpp Interface
---------------------------------------------------------------------------

Installing necessary packages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Download, install robotpkg and type make update in
`graphics/kpp-interfacewalk` on a machine with a Kineo license.


Starting OpenHRP
~~~~~~~~~~~~~~~~

To download the model of HRP2, you need to launch OpenHRP.


Starting the name server
~~~~~~~~~~~~~~~~~~~~~~~~

The first step consists in starting the name server:

[source,shell]
[~] ${HOME}/openrobots/bin/omniNames -start port-id

where port-id is your port-id. If you run omniNames later, you will
not need to specify again the port id. Simply type:

[source,shell]
[~] ${HOME}/openrobots/bin/omniNames


Starting OpenHRP model loader
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Type

[source,shell]
[~] ${HOME}/openrobots/bin/Modelloader.sh
ready

Running KineoPathPlanner with kppInterfaceWalk module
You can now run KineoPathPlanner and load kppInterfaceWalk module:

[source,shell]
${HOME}/openrobots/bin/KineoPathPlanner -ModulePath ${HOME}/openrobots/lib/modules/${HOST}/libkppInterfaceWalk.so

where `${HOST}` is the name of your machine (or localhost.localdomain).

You should get the following interface:

.KineoPathPlanner with kppInterfaceWalk module
image:figures/kppInterfaceWalk.png[KineoPathPlanner with module
kppInterfaceWalk]


Defining and solving a problem using menu "HPP/WALK"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To solve a simple problem without obstacles, do the following step:

* Click in menu "HPP/WALK -> Load HRP2"

* Click on button "Zoom All" and you should see the robot in a
  bounding box.

* In the top left "Scene" tree, in the "Devices" node, select "Humanoid Box"

* Click in menu "Insert -> Path -> New"

* The background becomes grey. Move the box to the desired goal
  configuration.

* Click on the button "Done" (top right panel). The background becomes
  blue again.

* Click in menu "HPP/WALK -> Set Init and Goal Configs"

* Click in menu "HPP/WALK -> Solve Problem"

* In the "Scene" tree, in the "Paths" node, select the last path

* Play the path in the path player that has appeared.


Defining and solving a problem using python scripts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Click in menu "HPP/WALK -> Start CORBA Server"

* Open a python interpreter and type the commands below.

[source,shell]
[~] python
Python 2.4.3 (#1, Oct 23 2006, 14:19:47)
[GCC 4.1.1 20060525 (Red Hat 4.1.1-1)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> from hppWalkInit import *
>>> initWalkPlanner(-8, -8, 0, 8, 8, 0)
>>> problemClient.solve()

* In the "Scene" tree, in the "Paths" node, select the last path

* Play the path in the path player that has appeared.

You can of course add obstacles using Corba Client obstacleClient
